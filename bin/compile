#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# clean up leaking environment
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

source "$build_dir/_mySite.cfg"

if [ ! -f $build_dir/Procfile ]; then
  Generate_Procfile=true
fi

if [ -f $build_dir/Gemfile ] && [ -f $build_dir/Gemfile.lock ]; then
  mv $build_dir/Gemfile $ruby_build_dir/
  mv $build_dir/Gemfile.lock $ruby_build_dir/
else
  mv $bp_dir/vendor/Gemfile $ruby_build_dir/
  mv $bp_dir/vendor/Gemfile.lock $ruby_build_dir/
fi

status "Installing Ruby, Jekyll and dependencies..."
ruby_buildpack_dir=$(mktemp -d -t ruby.XXXXXX)
ruby_build_dir=$(mktemp -d -t ruby_build.XXXXXX)
git clone --quiet https://github.com/heroku/heroku-buildpack-ruby.git $ruby_buildpack_dir
chmod -f +x $ruby_buildpack_dir/bin/{detect,compile,release} || true
$ruby_buildpack_dir/bin/compile $ruby_build_dir $cache_dir #>/dev/null
export GEM_HOME=$ruby_build_dir/vendor/bundle/ruby/2.1.0
export GEM_PATH=$ruby_build_dir/vendor/bundle/ruby/2.1.0:$GEM_PATH
export PATH=$ruby_build_dir/bin:$ruby_build_dir/vendor/bundle/bin:$ruby_build_dir/vendor/bundle/ruby/2.1.0/bin:$PATH

# $ruby_buildpack_dir/bin/release $ruby_build_dir

# status "Installing Jekyll and dependencies..."
# ruby_build_dir=$(mktemp -d -t ruby_build.XXXXXX)
# gem install jekyll --no-rdoc --no-ri --install-dir $ruby_build_dir/.gem | indent
# export GEM_PATH=$ruby_build_dir/.gem:$GEM_PATH

# Compile Jekyll site into BUILD_DIR
status "Compiling Jekyll site"
jekyll_build_dir=$(mktemp -d -t jekyll_build.XXXXXX)
mv $build_dir/* $jekyll_build_dir
curr_dir=$(pwd)
cd $jekyll_build_dir
jekyll build $jekyll_config --source $jekyll_build_dir --destination $build_dir
cd $curr_dir

# Node Installation --------------------------
status "Installing Node and build dependencies..."
node_buildpack_dir=$(mktemp -d -t node.XXXXXX)
git clone --quiet https://github.com/heroku/heroku-buildpack-nodejs.git $node_buildpack_dir
chmod -f +x $node_buildpack_dir/bin/{detect,compile,release} || true
mv $bp_dir/vendor/package-mySite.json $build_dir/package.json
$node_buildpack_dir/bin/compile $build_dir $cache_dir

if [ $Generate_Procfile ]; then
  npm_start=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .scripts.start)
  # If Procfile is absent, try to create one using `npm start`
  # If `scripts.start` is set in package.json, or a server.js file
  # is present in the app root, then create a default Procfile
  if [ "$npm_start" != "null" ] || [ -f $build_dir/server.js ]; then
    status "No Procfile found; Adding npm start to new Procfile"
    echo "web: npm start" > $build_dir/Procfile
  else
    status "Procfile not found and npm start script is undefined"
    status "Creating default Procfile"
    echo "web: mysite --source . serve" > $build_dir/Procfile
  fi
fi

# # Update the PATH
# status "Building runtime environment"
# mkdir -p $build_dir/.profile.d
# echo "export PATH=\" :\$PATH\";" > $build_dir/.profile.d/mySite.sh

# Cleanup -----------------------------------
rm -fr $ruby_buildpack_dir
rm -fr $ruby_build_dir
rm -fr $jekyll_build_dir
rm -fr $node_buildpack_dir
